Using the DEAP-EA framework to set up a multiobjective optimizer for the problem of subsea inspection coverage.
The evaluation-function and NSGA2-selection code are in C++ to speed things up.

Descriptions of the main runnables:

-------------
optimize_coverage.py

Run this to generate inspection plans and store them to disk. The file Parameters.py contains the parameters of the optimization.
Feel free to experiment with those parameters.

Mandatory arguments:

  -i INPUT_MODEL_PATH              The address of the 3D model we wish to make a plan for
  -o OUTPUT_FOLDER                 The path where we want to store resulting plans.

Optional arguments:

  --no_post_processing             Used to avoid post-processing generated plans, in order to store pictures of them and yml-files that can be imported to Rock
                                   If we choose this, we can post-process the generated plans manually later, using planExporter.py, plotData.py and storePlanImages.py
  --set_structure_viewpoint        If we chose to post-process plans, images will be stored of the plan. If we want to select the viewpoint of these images, we give this
                                   optional argument. If not given, and a viewpoint is already stored for this structure, that viewpoint will be used instead.

Usage example: python optimize_coverage -i ../3d_models/oil_manifold.stl -o results/oil_manifold/

An important thing to note: The planning will work best if the 3D model of the inspection target primitives
(the small triangles that the model is built up from) have relatively uniform (and relatively small) sizes.
This is because the estimates of coverage are based on counting the number of covered primitives.
Dividing into relatively equally sized triangles can be done with a 3D modelling program, such as Blender or
Meshlab. For instance, Meshlab's subdivide and decimate filters could be used: https://www.youtube.com/watch?v=aiIjBOt0mfo

Note that the triangles do not have to be exactly the same size - as long as one is not many times larger than another,
planning should work well.


TODO: Document the usage of viewpoints.pkl, and find some way of re-generating a viewpoint, in case the user regrets.

-------------
store_plan_images.py

Stores images of already generated plans to the same folder where the generated plans are located. The folder of generated plans should
follow the file structure generated by optimize_coverage.py.

Mandatory arguments:
    -i INPUT_FOLDER                     Path to folder containing your plans (this should be your results-folder generated by optimize_coverage.py, which contains the sub-folder "populations").

Optional arguments:
    --set_structure_viewpoint           If given, the user can define a viewpoint for this structure, from which images of plans will be shown. If not given, an already stored viewpoint will be used when available.


Usage example: python store_plan_images results/oil_manifold
-------------------
plan_exporter.py

Allows the user to export generated plans as yml-files, which can later be imported in Rock. The user supplies the root folder of his results, plans are
automatically extracted, stored in a subfolder. An optional argument also allows the plans to be offset and/or rotated.

Mandatory arguments:
    -i INPUT_FOLDER                    Path to folder containing your plans (this should be your results-folder, which contains the sub-folder "populations").

Optional arguments:
    --position_offset X Y Z            If given, this serves as an offset to the position of each point in the plan. Given as 3 numbers separated by space, representing the offset in x,y and z.
    --rotation_offset ROTATION_OFFSET  If given, this serves as an offset (in radians) of the plan, including the robot orientation. This could be useful if the orientation of the 3D model we
                                       planned for does not match the orientation of the real inspection target.

Usage example: python optimize_coverage -i results/oil_manifold

------------

VisualizePlan.py

Allows you to visualize a single optimized plan, to have a closer look at it. A prerequisite to running this is therefore that you have optimized plans, and you know which plan you want to take a look at. You should therefore probably store images of all generated plans first (store_plan_images.py), and find the ID of the plan you want to visualize.

Mandatory arguments:
	-i INPUT_FOLDER                    Path to folder containing your plans (this should be your results-folder, which contains the sub-folder "populations").
	--id ID				   The ID of the plan you want to visualize. You can find this ID in the picture of the plan, generated with store_plan_images.py

Optional arguments:
	--circulating			   If this argument is provided, the plan is visualized by circulating a "camera" automatically around it. This can be useful for generating videos of plans. If not, you control the "camera" for visualization yourself.

Usage example: python VisualizePlan.py -i results/oil_manifold --id 5
	
